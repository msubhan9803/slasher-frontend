image: atlassian/default-image:3

definitions:
  caches:
    node: node_modules
  services:
    docker:
      # Below, increase the default available docker memory to speed up docker apps.
      # Note: Whatever amount is allocated here will be deducted from the amount of memory allocated
      # to the main process. 4096 MB is the total available amount for a default "1x" pipeline instance.
      memory: 1536
  steps:
    - step: &lint-test-build
        # If our test runs for more than 20 minutes, something is definitely wrong.
        # We'll limit test run time so we don't waste CI build minutes.
        max-time: 20
        name: Lint, test, and build
        image: node:16.13.1
        services:
          - docker
        caches:
          - node
          - docker
        script:
          # Install NPM dependencies
          - npm ci
          # Run linter
          - npm run lint
          # Start docker mongo
          - >
            DOCKER_MONGO_CONTAINER_ID=$(
            docker run --detach -p 27017:27017
            --env MONGO_INITDB_ROOT_USERNAME=root --env MONGO_INITDB_ROOT_PASSWORD=rootpassword
            $(docker build -q ./docker/mongo)
            )
          # Start redis mongo
          - >
            DOCKER_REDIS_CONTAINER_ID=$(
            docker run --detach -p 6389:6379
            $(docker build -q ./docker/redis)
            )
          # Copy template env file to .env.test (to support testing)
          - cp .env.test.template .env.test
          # Run tests
          - npm run test
          - npm run test:e2e-core
          - npm run test:e2e-gateway
          # Stop docker mongo (kill for speed, since this is CI and clean shutdown doesn't matter)
          - docker container kill $DOCKER_MONGO_CONTAINER_ID
          # Stop docker redis (kill for speed, since this is CI and clean shutdown doesn't matter)
          - docker container kill $DOCKER_REDIS_CONTAINER_ID
          # Run build (to ensure that build succeeds)
          - npm run build

    - step: &deploy-ecs
        name: Deploy to AWS (incomplete)
        caches:
          - docker
        services:
          - docker
        script:
          # Load environment variables from appropriate deployment env file
          - set -o allexport; source ./deploy/.env.${BITBUCKET_BRANCH}

          # Set tag variables
          - NGINX_TAG="${CLUSTER_NAME}_${STAGE}_${TYPE_PROJECT}_nginx"
          - APP_TAG="${CLUSTER_NAME}_${STAGE}_${TYPE_PROJECT}_app"
          - CRON_TAG="${CLUSTER_NAME}_${STAGE}_${TYPE_PROJECT}_cron"

          # Build containers
          - >
            cd ${BITBUCKET_CLONE_DIR}/docker/nginx &&
            docker build --tag $NGINX_TAG --file Dockerfile .
            --build-arg NGINX_PORT=${NGINX_PORT}
            --build-arg APP_HOST_NAME=$APP_TAG
            --build-arg APP_PORT=${APP_PORT}
          - >
            cd ${BITBUCKET_CLONE_DIR} &&
            docker build --tag $APP_TAG --file app.Dockerfile .
          - >
            cd ${BITBUCKET_CLONE_DIR} &&
            docker build --tag $CRON_TAG --file cron.Dockerfile .

          # Push containers to Amazon ECR
          - pipe: atlassian/aws-ecr-push-image:1.5.0
            variables:
              IMAGE_NAME: "$NGINX_TAG"
              TAGS: "${BITBUCKET_BUILD_NUMBER} latest"
              #DEBUG: "true"
          - pipe: atlassian/aws-ecr-push-image:1.5.0
            variables:
              IMAGE_NAME: "$APP_TAG"
              TAGS: "${BITBUCKET_BUILD_NUMBER} latest"
              #DEBUG: "true"
          - pipe: atlassian/aws-ecr-push-image:1.5.0
            variables:
              IMAGE_NAME: "$CRON_TAG"
              TAGS: "${BITBUCKET_BUILD_NUMBER} latest"
              #DEBUG: "true"

          # Deploy the AWS Elastic Load Balancing service
          - cd ${BITBUCKET_CLONE_DIR}
          - pipe: atlassian/aws-cloudformation-deploy:0.13.0
            variables:
              STACK_NAME: '${CLUSTER_NAME}-${STAGE}-${TYPE_PROJECT}-service-elb'
              TEMPLATE: 'deploy/cloudformation/service/service-elb.yml'
              WAIT: 'true'
              STACK_PARAMETERS: >
                [
                  {
                    "ParameterKey": "ClusterName",
                    "ParameterValue": "${CLUSTER_NAME}"
                  },
                  {
                    "ParameterKey": "Stage",
                    "ParameterValue": "${STAGE}"
                  },
                  {
                    "ParameterKey": "TypeProject",
                    "ParameterValue": "${TYPE_PROJECT}"
                  },
                  {
                    "ParameterKey": "NginxPort",
                    "ParameterValue": "${NGINX_PORT}"
                  },
                  {
                    "ParameterKey": "DefaultAcmCertificateArn",
                    "ParameterValue": "${CERTIFICATE_ARN}"
                  },
                  {
                    "ParameterKey": "BackendSiteDomain",
                    "ParameterValue": "${BACKEND_SITE_DOMAIN}"
                  }
                ]
              #DEBUG: "true"

          # Deploy the AWS Elastic Container Service
          - cd ${BITBUCKET_CLONE_DIR}
          - pipe: atlassian/aws-cloudformation-deploy:0.13.0
            variables:
              STACK_NAME: '${CLUSTER_NAME}-${STAGE}-${TYPE_PROJECT}-service-ecs'
              TEMPLATE: 'deploy/cloudformation/service/service-ecs.yml'
              WAIT: 'true'
              STACK_PARAMETERS: >
                [
                  {
                    "ParameterKey": "BuildNumber",
                    "ParameterValue": "${BITBUCKET_BUILD_NUMBER}"
                  },
                  {
                    "ParameterKey": "ClusterName",
                    "ParameterValue": "${CLUSTER_NAME}"
                  },
                  {
                    "ParameterKey": "Stage",
                    "ParameterValue": "${STAGE}"
                  },
                  {
                    "ParameterKey": "TypeProject",
                    "ParameterValue": "${TYPE_PROJECT}"
                  },
                  {
                    "ParameterKey": "BackendSiteDomain",
                    "ParameterValue": "${BACKEND_SITE_DOMAIN}"
                  },
                  {
                    "ParameterKey": "FrontendSiteDomain",
                    "ParameterValue": "${FRONTEND_SITE_DOMAIN}"
                  },
                  {
                    "ParameterKey": "NginxPort",
                    "ParameterValue": "${NGINX_PORT}"
                  },
                  {
                    "ParameterKey": "AppPort",
                    "ParameterValue": "${APP_PORT}"
                  },
                  {
                    "ParameterKey": "AppVirtualCPUs",
                    "ParameterValue": "${APP_CPU}"
                  },
                  {
                    "ParameterKey": "AppMemoryMin",
                    "ParameterValue": "${APP_MEMORY_MIN}"
                  },
                  {
                    "ParameterKey": "AppMemoryMax",
                    "ParameterValue": "${APP_MEMORY_MAX}"
                  },
                  {
                    "ParameterKey": "CronVirtualCPUs",
                    "ParameterValue": "${CRON_CPU}"
                  },
                  {
                    "ParameterKey": "CronMemoryMin",
                    "ParameterValue": "${CRON_MEMORY_MIN}"
                  },
                  {
                    "ParameterKey": "CronMemoryMax",
                    "ParameterValue": "${CRON_MEMORY_MAX}"
                  },
                  {
                    "ParameterKey": "NginxVirtualCPUs",
                    "ParameterValue": "${NGINX_CPU}"
                  },
                  {
                    "ParameterKey": "NginxMemoryMin",
                    "ParameterValue": "${NGINX_MEMORY_MIN}"
                  },
                  {
                    "ParameterKey": "NginxMemoryMax",
                    "ParameterValue": "${NGINX_MEMORY_MAX}"
                  }
                ]
              DEBUG: 'true'

pipelines:
  branches:
    main:
      - step: *lint-test-build
    deploy/staging:
      - step: *lint-test-build
      #- step: *deploy-ecs
    deploy/prod:
      - step: *lint-test-build
      #- step: *deploy-ecs
  pull-requests:
    # Run for any branch that has an open pull request
    '**':
      - step: *lint-test-build
