AWSTemplateFormatVersion: 2010-09-09
Description: Sets Up Service Elb
Parameters:
  ClusterName:
    Type: String

  Stage:
    Type: String

  TypeProject:
    Type: String

  SiteName:
    Type: String

  DefaultAcmCertificateArn:
    Type: String

  NginxPort:
    Type: Number
    Default: 80

  AppSocketPort:
    Type: Number
    Default: 5941

  AlbHealthCheckInterval:
    Type: String
    Default: 20

  AlbHealthCheckPath:
    Type: String
    Default: /health

  AlbHealthCheckTimeout:
    Type: String
    Default: 10

  AlbHealthCheckHealthyThreshold:
    Type: String
    Default: 2

  AlbHealthCheckUnhealthyThreshold:
    Type: String
    Default: 2

  HasHTTPS:
    Type: String
    Default: true

  SiteTgPriority:
    Type: String
    Default: 2

Conditions:
  hasSSL: !Equals [!Ref HasHTTPS, "true"]

Resources:
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ClusterName}-${Stage}-${TypeProject}-tg
      VpcId:
        'Fn::ImportValue': !Sub ${ClusterName}-${Stage}-VPC
      Protocol: HTTP
      TargetType: 'instance'
      Port: !Ref NginxPort
      Matcher:
        HttpCode: '200,401'
      HealthCheckIntervalSeconds: !Ref AlbHealthCheckInterval
      HealthCheckPath: !Ref AlbHealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: !Ref AlbHealthCheckTimeout
      HealthyThresholdCount: !Ref AlbHealthCheckHealthyThreshold
      UnhealthyThresholdCount: !Ref AlbHealthCheckUnhealthyThreshold
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
        - Key: stickiness.enabled
          Value: 'true'
  TargetGroupWS:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ClusterName}-${Stage}-${TypeProject}-ws
      VpcId:
        'Fn::ImportValue': !Sub ${ClusterName}-${Stage}-VPC
      Protocol: HTTP
      TargetType: 'instance'
      Port: !Ref AppSocketPort
      Matcher:
        HttpCode: '200,401,404'
      HealthCheckIntervalSeconds: !Ref AlbHealthCheckInterval
      HealthCheckPath: !Ref AlbHealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: !Ref AlbHealthCheckTimeout
      HealthyThresholdCount: !Ref AlbHealthCheckHealthyThreshold
      UnhealthyThresholdCount: !Ref AlbHealthCheckUnhealthyThreshold
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
        - Key: stickiness.enabled
          Value: 'true'
  ListenerCertificate:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Condition: hasSSL
    Properties:
      Certificates:
        - CertificateArn: !Ref DefaultAcmCertificateArn
      ListenerArn:
        'Fn::ImportValue': !Sub ${ClusterName}-${Stage}-ApplicationAlbListenerForHttps

  SiteNameListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        !If
          - hasSSL
          - 'Fn::ImportValue': !Sub ${ClusterName}-${Stage}-ApplicationAlbListenerForHttps
          - 'Fn::ImportValue': !Sub ${ClusterName}-${Stage}-ApplicationAlbListenerForHttp
      Priority: !Ref SiteTgPriority
      Conditions:
        - Field: host-header
          Values:
            - !Ref SiteName
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  SiteNameWSListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        'Fn::ImportValue': !Sub ${ClusterName}-${Stage}-ApplicationAlbListenerForWebSocket
      Priority: !Ref SiteTgPriority
      Conditions:
        - Field: host-header
          Values:
            - !Ref SiteName
      Actions:
        - TargetGroupArn: !Ref TargetGroupWS
          Type: forward
Outputs:
  TargetGroup:
    Value: !Ref TargetGroup
    Export:
      Name: !Sub ${ClusterName}-${Stage}-${TypeProject}-tg
  TargetGroupWS:
    Value: !Ref TargetGroupWS
    Export:
      Name: !Sub ${ClusterName}-${Stage}-${TypeProject}-ws
