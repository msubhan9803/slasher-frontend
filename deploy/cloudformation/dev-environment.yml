AWSTemplateFormatVersion: 2010-09-09
Description: EC2 development instance

# Create Stack:
# Same as Update Stack (see below), but replace "update-stack" with "create-stack"

# Update Stack:
# aws cloudformation update-stack --stack-name slasher-dev-server \
# --template-body file://deploy/cloudformation/dev-environment.yml \
# --parameters ParameterKey=SSHLocation,ParameterValue=1.2.3.4/32 \
# ParameterKey=MongoDbAdminUser,ParameterValue=admin \
# ParameterKey=MongoDbAdminPassword,ParameterValue=password \
# ParameterKey=MongoDbSlasherUser,ParameterValue=slasher \
# ParameterKey=MongoDbSlasherPassword,ParameterValue=password \
# ParameterKey=BackendSiteDomain,ParameterValue=something.example.com

# Validate current version of template
# aws cloudformation validate-template --template-body file://deploy/cloudformation/dev-environment.yml

# Create and describe a change set (but do not make any changes):
# aws cloudformation delete-change-set --stack-name slasher-dev-server --change-set-name test-change-set && \
# aws cloudformation create-change-set --stack-name slasher-dev-server --change-set-name test-change-set --change-set-type UPDATE \
# --template-body file://deploy/cloudformation/dev-environment.yml \
# --parameters ParameterKey=SSHLocation,ParameterValue=1.2.3.4/32 && \
# aws cloudformation describe-change-set --stack-name slasher-dev-server --change-set-name test-change-set

# Delete stack:
# aws cloudformation delete-stack --stack-name slasher-dev-server

# Estimate cost for stack:
# aws cloudformation estimate-template-cost --template-body file://deploy/cloudformation/dev-environment.yml \
# --parameters ParameterKey=SSHLocation,ParameterValue=1.2.3.4/32

Parameters:
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x"
  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1b # same as staging cluster
  SwapSizeInGB:
    Type: Number
    Default: 2
  InstanceType:
      Description: EC2 instance type
      Type: String
      Default: t3a.small
      AllowedValues:
        - t3a.micro
        - t3a.small
        - t3a.medium
      ConstraintDescription: Must be one of the EC2 instance types allowed by the CloudFormation template
  MongoDbAdminUser:
    Type: String
  MongoDbAdminPassword:
    Type: String
  MongoDbSlasherUser:
    Type: String
  MongoDbSlasherPassword:
    Type: String
  BackendSiteDomain:
    Type: String

Resources:
  DevServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      # ImageId is: Canonical, Ubuntu, 20.04 LTS, amd64 focal image build on 2022-09-14
      # - Virtualization: hvm, ENA enabled: true, Root device type: ebs
      # - This ImageId is only available in the us-east-1 region
      # - Image can be used with t3a.nano through t3a.2xlarge (and other types,
      #   but need to consult AWS console for those other types)
      ImageId: ami-0149b2da6ceec4bb0
      AvailabilityZone: !Ref AvailabilityZone
      InstanceType: !Ref InstanceType
      Tags:
        - Key: Name
          Value: slasher-dev
      KeyName: slasher-dev
      SecurityGroupIds:
        - !Ref DevServerSecurityGroup
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: "20"
      # Note: If an EC2 instance is EBS backed, changes to UserData alone will only trigger a reboot,
      # and should not delete the EBS volume or re-run the UserData script.  By comparison, if an EC2
      # instance is instance-store-backed, the entire instance would be rebuilt, the data on the
      # instance-backed volume would be lost, and the UserData script would be re-run.
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash

            # Write out a file that indicates the build time of this instance.
            # This will be useful for troubleshooting CloudFormation update issues.
            # Note: Doing an append (>>) instead of a regular write (>) to ensure that this
            # only ever runs once per instance. If we see two printouts in the file, we'll
            # know that something went wrong.
            echo "EC2 instance generated with CloudFormation on `date`" >> ~/generation-note.txt

            # Update apt package list
            sudo apt-get update

            # Install emacs
            sudo apt-get install -y emacs-nox

            # Set up swap
            sudo dd if=/dev/zero of=/swapfile bs=1024M count=${SwapSizeInGB}
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile swap swap defaults 0 0' | sudo tee -a /etc/fstab

            # Add MongoDB 4.x gpg key (https://www.mongodb.com/docs/v4.4/tutorial/install-mongodb-on-ubuntu/)
            wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -
            # Add MongoDB apt repo
            echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list
            # Update apt package list again to get MongoDB packages
            sudo apt-get update
            # Install MongoDB
            sudo apt-get install -y mongodb-org=4.4.16 mongodb-org-server=4.4.16 mongodb-org-shell=4.4.16 mongodb-org-mongos=4.4.16 mongodb-org-tools=4.4.16
            # Prevent automatic MongoDB updates by pinning to current version
            echo "mongodb-org hold" | sudo dpkg --set-selections
            echo "mongodb-org-server hold" | sudo dpkg --set-selections
            echo "mongodb-org-shell hold" | sudo dpkg --set-selections
            echo "mongodb-org-mongos hold" | sudo dpkg --set-selections
            echo "mongodb-org-tools hold" | sudo dpkg --set-selections
            # Start MongoDB
            sudo systemctl start mongod
            # Wait a little while for MongoDB to start
            sleep 10
            # Set up mongo admin user
            mongo admin --eval "db.createUser({user: '${MongoDbAdminUser}',   pwd: '${MongoDbAdminPassword}',   roles: [ { role: 'root', db: 'admin' } ]})"
            # Set up mongo slasher user
            mongo slasher --eval "db.createUser({user: '${MongoDbSlasherUser}', pwd: '${MongoDbSlasherPassword}', roles: [ { role: 'readWrite', db: 'slasher' } ]})"
            # Enable MongoDB security by un-commenting security section and adding 'authorization: enabled'
            sudo sed -i 's/#security:/security:\n  authorization: "enabled"/g' /etc/mongod.conf
            # Allow external connections to MongoDB
            sudo sed -i 's/bindIp: 127\.0\.0\.1/bindIp: 0.0.0.0/g' /etc/mongod.conf
            # Restart MongoDB
            sudo systemctl restart mongod
            # Make sure that MongoDB starts on reboot in the future
            systemctl enable mongod.service

            # Install redis
            sudo apt-get install -y redis

            # Install nvm
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash

            # Install node
            nvm install 16.13.1

            # Update npm to 8.2.0
            npm install -g npm@8.2.0

            # Install nginx
            sudo apt install nginx -y

            # Set up placeholder vhost in sites-available directory
            sudo mkdir -p /var/www/${BackendSiteDomain}/html
            echo 'server {
              listen 80;
              listen [::]:80;

              root /var/www/${BackendSiteDomain}/html;
              index index.html;

              server_name ${BackendSiteDomain};

              location / {
                      try_files $uri $uri/ =404;
              }
            }' | sudo tee /etc/nginx/sites-available/${BackendSiteDomain}

            # Make vhost active by creating a sites-enabled symlink
            sudo ln -s /etc/nginx/sites-available/${BackendSiteDomain} /etc/nginx/sites-enabled/

            # Add placeholder index.html to docroot
            echo 'Available' | sudo tee /var/www/${BackendSiteDomain}/html/index.html

            # Restart nginx
            sudo systemctl restart nginx

            # Wait for nginx to start up
            sleep 5

            # Install certbot for Let's Encrypt certificates
            # Note: Using snap as install source instead of apt because it provides a newer version
            # of certbot than apt would, which fixes a bug (https://github.com/certbot/certbot/issues/6776)
            # that affected us.  GitHub issue only mentioned capital letter issue, but it seems to
            # affect vhosts with a dash in the name too.
            sudo snap install --classic certbot

            # Add symlink for certbot so that the command is on our path
            sudo ln -s /snap/bin/certbot /usr/bin/certbot

            # Generate SSL cert for the backend site domain
            sudo certbot --nginx -d ${BackendSiteDomain} --non-interactive --agree-tos -m eric@slasher.tv

            # Restart nginx
            sudo systemctl restart nginx
  DevServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow inbound HTTP/HTTPS/SSH traffic"
      Tags:
        - Key: Name
          Value: slasher-dev
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          CidrIp: !Ref SSHLocation

  DevServerEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref DevServerInstance
      Tags:
        - Key: Name
          Value: dev-server-eip

Outputs:
  PublicIP:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - DevServerInstance
          - PublicIp
    Description: Server public IP address
